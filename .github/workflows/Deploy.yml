 ```yaml
 name: Build and Deploy to Hostinger (FTP)

 on:
   push:
     branches:
       - main  # Trigger on pushes to 'main' (adjust if needed)
   workflow_dispatch: # Allow manual triggering

 jobs:
   build-and-deploy:
     runs-on: ubuntu-latest

     steps:
       - name: Checkout code
         uses: actions/checkout@v3

       - name: Set up Node.js
         uses: actions/setup-node@v3
         with:
           node-version: '18' # Or your desired Node.js version

       - name: Install dependencies
         run: npm install

       - name: Build project
         run: npm run build

       - name: Upload artifact
         uses: actions/upload-artifact@v3
         with:
           name: dist-files
           path: dist
           retention-days: 5

       - name: Deploy to FTP
         uses: SamKirkland/FTP-Deploy-Action@v4.3.4 # Use a reliable FTP deployment action
         with:
           server: ${{ secrets.FTP_SERVER }}
           username: ${{ secrets.FTP_USERNAME }}
           password: ${{ secrets.FTP_PASSWORD }}
           local-dir: ./dist/ # Upload the contents of the dist directory
           server-dir: ${{ secrets.FTP_REMOTE_PATH }} # The remote directory
           delete-removed: true # VERY IMPORTANT: Clean up old files
 ```
*  **Key Changes and Explanations from previous examples**
      *   **Combined Build and Deploy:** This workflow combines the *build* process (creating the `dist` folder) and the *deployment* process (uploading to FTP) into a single workflow. This is the most straightforward approach for your situation.
      *  **`delete-removed: true`:**  This crucial option tells the FTP action to *delete* files on the server that no longer exist in your local `dist` folder.  This prevents old files from accumulating and causing problems.
